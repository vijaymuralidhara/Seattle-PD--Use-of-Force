remove_digits <- function(vos) {
digits <- "0" & "1" & "2" & "3" & "4" & "5" & "6" & "7" & "8" & "9"
result <- str_remove(vos, digits)
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1, 2, 3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1 & 2 & 3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1 : 2 : 3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:2:3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1|2|3]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1 | 2 | 3]
print(top_three)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[`1 | 2 | 3`]
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
movies <- c("The Lion King", "Avengers","Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2,3)
top_three <- movies[indices]
print(top_three)
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
indices <- c(1, 2, 3)
top_three <- movies[indices]
print(top_three)
excited <- paste(movies, " is a great movie!")
print(excited)
excited <- paste(movies, "is a great movie!")
print(excited)
without_four <- movies[-4]
print(without_four)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Lion King", "Avengers", "Black Panther", "Man of Steel", "Aquaman", "Creed")
ithout_four <- movies[-4]
print(without_four)
multiples_of_4 <- c(4:400)
print(multiples_of_4)
all <- c(4:400)
ind <- c(all / 4 %% 0)
multiples_of_4 <- all[ind]
print(multiples_of_4)
all <- c(4:400)
divde <- (all / 4) %% 0
ind <- c(divide)
multiples_of_4 <- all[ind]
print(multiples_of_4)
all <- c(4:400)
ind <- c((all / 4) %% 0)
multiples_of_4 <- all[ind]
print(multiples_of_4)
multiples_of_4 <- seq(4, 400, 4)
print(multiples_of_4)
multiples_of_8 <- seq(multiples_of_4, 2)
multiples_of_8 <- multiples_of_4 / 2
print(multiples_of_8)
multiples_of_8 <- multiples_of_4 * 2
print(multiples_of_8)
multiples_of_8 <- multiples_of_4 / 8
print(multiples_of_8)
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4 / 2
print(multiples_of_8)
multiples_of_8 <- seq(multiples_of_4, 8)
print(multiples_of_8)
# down to only elements that are divisible by 8.
multiples_of_8 <- seq(8, multiples_of_4)
print(multiples_of_8)
multiples_of_8 <- seq(8, multiples_of_4, 8)
print(multiples_of_8)
multiples_of_8 <- seq(multiples_of_4, 24)
print(multiples_of_8)
multiples_of_8 <- seq(multiples_of_4, 8, 8)
print(multiples_of_8)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- seq(24, multiples_of_4)
print(multiples_of_8)
multiples_of_4 <- seq(4, 400, 4)
print(multiples_of_4)
multiples_of_8 <- c(8)
print(multiples_of_8)
multiples_of_8 <- seq(multiples_of_4, multiples_of_4, 8)
print(multiples_of_8)
multiples_of_8 <- seq(0, multiples_of_4, 8)
print(multiples_of_8)
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
numbers_mean <- mean(numbers)
print(numbers_mean)
lower <- numbers_mean > numbers
lower_numbers <- numbers[numbers_mean]
print(lower_numbers)
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
lower <- numbers_mean > numbers
lower_numbers <- numbers[numbers_mean]
print(lower_numbers)
lower <- numbers_mean > numbers
lower_numbers <- numbers_mean[numbers]
print(lower_numbers)
lower <- numbers_mean > numbers
lower_numbers <- numbers[numbers_mean]
print(lower_numbers)
lower <- numbers < numbers_mean
lower_numbers <- numbers[lower]
print(lower_numbers)
lower <- numbers > numbers_mean
lower_numbers <- numbers[lower]
print(lower_numbers)
lower <- numbers < numbers_mean
lower_numbers <- numbers[lower]
print(lower_numbers)
higher <- numbers > numbers_mean
higher_numbers <- numbers[higher]
print(higher_numbers)
summary_1_to_100 <- summarize_vector(c(1, 100))
print(summary_1_to_100)
summary_info <- list(length, mean, median)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(v1) {
result <- summary_info[c(length(v1), mean(v1), median(v1))]
return(result)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1, 100))
print(summary_1_to_100)
summary_info <- list(
length = length(v1),
mean = mean(v1),
median = median(v1))
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(v1) {
result <- summary_info[c(length, mean, median)]
return(result)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1, 100))
print(summary_1_to_100)
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(v1) {
result <- summary_info[c(length, mean, median)]
return(result)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1, 100))
print(summary_1_to_100)
summarize_vector <- function(v1) {
summary <- paste(length(v1), mean(v1), median(v1))
return(summary)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1, 100))
print(summary_1_to_100)
summarize_vector <- function(v1) {
summary <- paste(length(v1), mean(v1), median(v1))
return(summary)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1:100))
print(summary_1_to_100)
summarize_vector <- function(v1) {
summary <- list(length = length(v1),
mean = mean(v1),
median = median(v1))
return(summary)
}
ummarize_vector <- function(v1) {
summary <- list(length = length(v1),
mean = mean(v1),
median = median(v1))
return(summary)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1:100))
print(summary_1_to_100)
summarize_vector <- function(v1) {
summary <- list(length = length(v1),
mean = mean(v1),
median = median(v1))
return(summary)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median)
print(summary_info)
multiples_of_4 <- seq(4, 400, 4)
print(multiples_of_4)
div <- multiples_of_4 / 8 %% 0
multiples_of_8 <- multiples_of_4[div]
div <- multiples_of_4 / 8 %% 0
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
div <- multiples_of_4 / 8
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
div <- (multiples_of_4 / 8) %% 0
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
div <- 8 / multiples_of_4
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
div <- 2 / multiples_of_4
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
# down to only elements that are divisible by 8.
div <- multiples_of_4 / 2
multiples_of_8 <- multiples_of_4[div]
print(multiples_of_8)
remove_digits <- function(vos) {
digits <- "0" & "1" & "2" & "3" & "4" & "5" & "6" & "7" & "8" & "9"
result <- str_remove(vos, digits)
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
emove_digits <- function(v1) {
result <- str_remove(v1, "0 : 9")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(v1) {
result <- str_remove(v1, "0 | 9")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "0, 9")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "0" | "9")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_extract(v1, "0")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]+")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]+")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]++")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]+")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO201", "CSE142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]+")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
remove_digits <- function(v1) {
result <- str_remove(v1, "[0-9]+")
return(result)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(str_trim(remove_digits(c("INFO 201", "CSE 142"))))
lintr:::addin_lint()
make_introduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(result)
}
print(make_introduction("Reyan", 18))
lintr:::addin_lint()
lintr:::addin_lint()
install.packages("carData")
library("carData")
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
rida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[,Florida$GORE > Florida$BUSH])
counties <- Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$NADER > Florida$counties]
Florida[Florida$NADER > (Florida$GORE> Florida$BUSH)]
Florida[Florida$NADER > (Florida$GORE> Florida$BUSH)]
Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$NADER > (Florida$GORE> Florida$BUSH)]
Florida[Florida$NADER > (Florida$GORE> Florida$BUSH),]
rownames(Florida[Florida$Total == max(Florida$Total),])
Florida[Florida$NADER > (Florida$GORE> Florida$BUSH),]
Florida[Florida$GORE > Florida$BUSH,]
lorida[Florida$GORE > Florida$BUSH,]
rownames(Florida[Florida$NADER == max(Florida$NADER),])
(Florida[Florida$NADER == max(Florida$NADER),])
(Florida[Florida$NADER == max(Florida$NADER), Florida[Florida$GORE > Florida$BUSH,]])
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
print(distplot)
shiny::runApp('University of Washington/2019-2020/Fall/INFO 201/Coding/Demo')
runApp('University of Washington/2019-2020/Fall/INFO 201/Coding/Demo')
runApp('University of Washington/2019-2020/Fall/INFO 201/Coding/Demo')
runApp('University of Washington/2019-2020/Fall/INFO 201/Coding/Demo')
viz_1 <- crisis %>%
ggplot(aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
setwd("~/University of Washington/2019-2020/Fall/INFO 201/Coding/Seattle-PD--Use-of-Force/data")
viz_1 <- crisis %>%
ggplot(aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- ggplot(crisis, aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- ggplot(data = crisis, aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
library(ggplot2)
library(dplyr)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
crisis <- read.csv("crisis-data.csv", stringsAsFactors = FALSE)
View(crisis)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
crisis <- read.csv("crisis-data.csv", stringsAsFactors = FALSE)
View(crisis)
View(crisis)
crisis %>%
filter(Officer.Gender == "N") %>%
View()
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, Officer.Race, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, Officer.Race, y = Use.of.Force.Indicator)) +
geom_point()
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, Officer.Race, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, Officer.Race, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, Officer.Race, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = c(Officer.Gender, Officer.Race), y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = c(Officer.Gender, Officer.Race), y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
library(ggplot2)
library(dplyr)
crisis <- read.csv("crisis-data.csv", stringsAsFactors = FALSE)
View(crisis)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
viz_1 <- crisis %>%
ggplot(mapping = aes(x = Officer.Gender, y = Use.of.Force.Indicator)) +
geom_point()
print(viz_1)
print(viz_1)
